from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'story': '–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞—à–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é üßõ'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })
#
#________________________________–≠–•–û_______________________
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode =='gpt':
        await gpt_dialog(update,context)
    if dialog.mode=='talk':
        await talk_dialog(update,context)
    if dialog.mode=='quiz':
        await quiz_dialog(update, context)
    if dialog.mode=='story':
        await send_text(update, context, update.callback_query.data)

    else:
        # text = update.message.text
        # print(text)
        await send_text(update,context, start)
# ____________________–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç________________________

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = load_prompt('random')
    message = load_message('random')
    await send_image(update,context,'random')
    await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt,'')
    await send_text_buttons(update, context,answer,random_map)
async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb=update.callback_query.data
    if cb=="random_more":
        await random(update, context)

    else:
        await send_text(update,context,"–ù–∞–∂–º–∏—Ç–µ /start")


# _____________________________–í–æ–ø—Ä–æ—Å GPT________________________________
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text=update.message.text
    message=await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)

# ___________________________–†–∞–∑–≥–æ–≤–æ—Ä___________________________________________
async def talk(update:Update,context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    message = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, message, talking_map)

async def talk_button(update:Update, context:ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    companion = update.callback_query.data
    await send_image(update,context,companion)
    chat_gpt.set_prompt(load_prompt(companion) )
    await send_text(update,context,f'–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–≤–æ—Ä —Å {talking_map.get(companion)}')

async def talk_dialog(update:Update, context:ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)

# _____________________________________–ö–í–ò–ó_________________________________________
async def quiz(update:Update, context:ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'quiz'
    message = load_message('quiz')
    dialog.isStart=False
    dialog.count=0
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, quiz_map)
    chat_gpt.set_prompt(load_prompt('quiz'))

async def quiz_button(update:Update, context:ContextTypes.DEFAULT_TYPE):


    await update.callback_query.answer()
    topic = update.callback_query.data
    if dialog.isStart is False:
        message = await send_text(update,context,f'–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ {quiz_map[topic]}')
        dialog.isStart=True
    else:
        message = await send_text(update, context, f'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ö–≤–∏–∑')
    answer = await chat_gpt.add_message(topic)
    await message.edit_text(answer)



async def quiz_dialog(update:Update, context:ContextTypes.DEFAULT_TYPE):

    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer =="–ü—Ä–∞–≤–∏–ª—å–Ω–æ!":
        dialog.count+=1
    await send_text_buttons(update, context, f'{answer} –ü—Ä–∏–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ {dialog.count}',{
        'quiz_more':"–ó–∞–¥–∞–π –µ—â–µ –≤–æ–ø—Ä–æ—Å"
    } )


# ____________Scary_story________________

async def story(update:Update, context:ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'story'
    prompt = load_prompt('story')
    await send_image(update,context,'story')
    chat_gpt.set_prompt(prompt)
    await send_text_buttons(update,context,'–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ —Å—Ç—Ä–∞—à–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é...',
    {'story_next': '–î–∞–≤–∞–π –∫–æ–ª–¥—É–Ω *—á–∏–π '})

async def story_button(update:Update, context:ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    answer = await chat_gpt.add_message(data)
    await send_text_buttons(update,context,answer,
                                      {'story_next': '–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–ª–¥—É–Ω *—á–∏–π',
                                       'story_end':'–°—Ç—Ä–∞—à–Ω–æ –Ω–∞—Ö—Ä–µ–Ω –≤—ã—Ä—É–±–∞–π'})









talking_map = {
        'talk_Cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        'talk_Tolkien':'–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_Nietzsche':'–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_Hawking':'–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    }


quiz_map={'quiz_prog':'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
           'quiz_math':'–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è',
           'quiz_biology':'–ë–∏–æ–ª–æ–≥–∏—è',
           }



random_map={
        'random_more':'–•–æ—á—É –µ—â—ë —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç',
        'random_end':"–ó–∞–∫–æ–Ω—á–∏—Ç—å"
    }












dialog = Dialog()
dialog.mode = None
dialog.count = 0
dialog.isStart =False

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chat_gpt = ChatGptService(ChatGPT_TOKEN)

app = ApplicationBuilder().token(
    "7383138708:AAH7afwmbkXtfg_XVY7t5FDWRGa5xUcbVkA").build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random',random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('story', story))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND , text_handler))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:

# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(random_button, pattern='^random_.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(story_button, pattern='^story_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
